name: Deploy to ASG Behind ALB

on:
  push:
    branches:
      - main  # Trigger on push to main branch

jobs:
  deploy:
    name: Deploy to ASG & ALB
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get ASG Instances Public IPs
        id: get-instances
        run: |
          INSTANCE_IDS=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-name my-asg \
            --query "AutoScalingGroups[0].Instances[*].InstanceId" \
            --region us-east-1 \
            --output text)

          INSTANCE_IPS=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_IDS \
            --query "Reservations[*].Instances[*].PublicDnsName" \
            --region us-east-1 \
            --output text)

          echo "INSTANCE_IPS=$INSTANCE_IPS" >> $GITHUB_ENV

      - name: Deploy to ASG Instances via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.INSTANCE_IPS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo apt-get -y update
            sudo apt-get install -y apache2
            sudo systemctl start apache2
            sudo systemctl enable apache2
            cd home
            sudo mv * /var/www/html

      - name: Verify Deployment via ALB
        run: |
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names my-alb \
            --query "LoadBalancers[0].DNSName" \
            --region us-east-1 \
            --output text)
          
          echo "Checking ALB: http://$ALB_DNS"
          curl -I http://$ALB_DNS

      - name: Verify Route 53 Custom Domain
        run: |
          echo "Verifying custom domain: http://${{ secrets.DOMAIN_NAME }}"
          curl -I http://${{ secrets.DOMAIN_NAME }}
